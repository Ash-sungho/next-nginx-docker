user  nginx;  # Nginx 서버가 어떤 사용자로 실행될지를 지정. 일반적으로 'nginx' 사용자가 설정됨.

worker_processes  auto;  # Nginx가 사용할 워커 프로세스의 수를 설정. 'auto'로 설정하면, Nginx가 자동으로 CPU 코어 수에 맞게 설정함.

error_log  /var/log/nginx/error.log notice;  # Nginx 서버의 에러 로그 파일 경로를 지정하고, 로그 레벨을 설정('notice'는 비교적 일반적인 로그 레벨).

pid        /var/run/nginx.pid;  # Nginx의 프로세스 ID(PID)를 저장할 파일 경로를 지정.

events {
    worker_connections  1024;  # 각 워커 프로세스가 동시에 처리할 수 있는 최대 연결 수를 설정. 일반적으로 1024로 설정됨.
}

http {
    include       /etc/nginx/mime.types;  # MIME 타입을 정의한 파일을 포함하여, 다양한 파일 형식에 맞는 콘텐츠 타입을 설정.
    default_type  application/octet-stream;  # 기본 콘텐츠 타입을 설정. 파일 타입을 알 수 없을 때 사용됨.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  
                      # 로그 형식을 정의. 여기서는 'main'이라는 이름의 로그 형식이 정의됨. 이 형식은 주로 접근 로그에 사용됨.

    access_log  /var/log/nginx/access.log  main;  # 접근 로그 파일의 경로를 지정하고, 앞서 정의한 'main' 로그 형식을 사용.
    sendfile        on;  # sendfile 기능을 켜서, 파일 전송 성능을 향상시킴.
    keepalive_timeout  65;  # 클라이언트와의 연결이 유지될 시간을 설정. 여기서는 65초로 설정됨.

    # 캐시 경로 및 설정
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=nextjs_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
    include /etc/nginx/conf.d/*.conf;  # /etc/nginx/conf.d/ 폴더 안에 있는 모든 .conf 파일을 포함. 이 폴더에는 추가적인 서버 설정이 들어갈 수 있음.

    server {
        listen       80 default_server;  # 이 서버 블록이 80번 포트에서 들어오는 HTTP 요청을 처리하도록 설정.
        server_name  localhost;  # 서버의 이름(도메인 이름)을 지정. 여기서는 'localhost'로 설정되어 있음.

        location / {
            #proxy_pass http://localhost:3000;  # Next.js 서버 주소
            proxy_pass http://nextapp-nextjs-1:3000;  # 컨테이너 이름을 사용하여 프록시 패스 설정
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # 캐시 설정 추가
            proxy_cache nextjs_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            add_header X-Proxy-Cache $upstream_cache_status;

        }

         # 정적 파일 캐시 설정
        location /static/ {
            root /usr/share/nginx/html;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }

        # _next 폴더 내의 리소스에 대한 캐시 설정
        location /_next/ {
            root /usr/share/nginx/html;
            proxy_cache nextjs_cache;
            proxy_cache_valid 200 1h;
            add_header X-Proxy-Cache $upstream_cache_status;

        # TODO: API 요청 프록시 서버 설정해야됨 
        }

        error_page   500 502 503 504  /50x.html;  # 500, 502, 503, 504 에러가 발생했을 때 보여줄 커스텀 에러 페이지를 설정.

        location = /50x.html {
            root   /usr/share/nginx/html;  # 50x.html 에러 페이지 파일이 /usr/share/nginx/html 디렉토리에 있다고 설정.
        }
    }
}
