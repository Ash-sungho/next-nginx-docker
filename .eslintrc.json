{
    "root": true, // 이 설정 파일이 프로젝트의 루트 설정 파일임을 명시합니다. 다른 상위 설정 파일을 무시하게 됩니다.

    "parser": "@typescript-eslint/parser", // TypeScript 코드를 파싱하기 위해 '@typescript-eslint/parser'를 사용합니다.

    "plugins": ["@typescript-eslint", "prettier"], // ESLint에서 사용되는 플러그인을 정의합니다. '@typescript-eslint'는 TypeScript를 위한 플러그인이고, 'prettier'는 코드 포맷팅을 위한 플러그인입니다.

    "parserOptions": {
        "project": "./tsconfig.json", // TypeScript 프로젝트 파일(tsconfig.json)의 경로를 지정합니다.
        "createDefaultProgram": true // 프로젝트가 명시되지 않았을 경우 기본 프로그램을 생성하도록 설정합니다. (필요하지 않을 수 있음)
    },

    "env": {
        // 전역 객체를 ESLint가 인식하도록 환경을 설정합니다.
        "browser": true, // 브라우저 환경의 전역 객체(document, window 등)를 인식할 수 있도록 설정합니다.
        "node": true, // Node.js 환경의 전역 객체를 인식할 수 있도록 설정합니다.
        "es6": true // ES6 문법을 사용 가능하도록 설정합니다.
    },

    "ignorePatterns": ["node_modules/", "next.config.mjs"], // ESLint가 무시할 폴더와 파일을 지정합니다. 여기서는 node_modules 폴더와 next.config.mjs 파일을 제외합니다.

    "extends": [
        "airbnb", // Airbnb의 JavaScript 스타일 가이드를 따릅니다.
        "airbnb-typescript", // Airbnb의 TypeScript 스타일 가이드를 따릅니다.
        "airbnb/hooks", // Airbnb의 React Hooks 스타일 가이드를 따릅니다.
        "next/core-web-vitals", // Next.js에서 권장하는 Core Web Vitals 관련 규칙을 따릅니다.
        "plugin:@typescript-eslint/recommended", // TypeScript ESLint 플러그인의 권장 규칙을 따릅니다.
        "plugin:@typescript-eslint/parser", // TypeScript parser
        "plugin:prettier/recommended", // ESLint의 포맷팅 규칙을 Prettier로 사용하도록 설정합니다.
        "prettier" // Prettier와 충돌하는 ESLint 규칙을 비활성화하여 Prettier가 포맷팅을 전담하게 합니다.
    ],

    "rules": {
        "react/react-in-jsx-scope": "off", // React 17 이상에서는 JSX를 사용하기 위해 React를 import할 필요가 없으므로 해당 규칙을 비활성화합니다.

        // 경고를 표시하며, 파일 확장자로 .ts와 .tsx를 허용합니다.
        "react/jsx-filename-extension": [
            "warn",
            { "extensions": [".ts", ".tsx"] }
        ],

        "no-useless-catch": "off", // 불필요한 catch 문을 사용할 수 없게 하는 규칙을 비활성화합니다.

        "prettier/prettier": ["error"], // Prettier에서 포맷팅 규칙을 어긴 경우 오류로 간주합니다.

        // 함수 컴포넌트를 정의할 때, 화살표 함수와 함수 선언 방식만 허용합니다.
        "react/function-component-definition": [
            2,
            { "namedComponents": ["arrow-function", "function-declaration"] }
        ]
    }
}
